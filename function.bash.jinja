{% set optional_opts = opts|rejectattr('required')|list %}
{% set required_opts = opts|selectattr('required')|list %}
{% set options_metavars %}
 [-h
{%- for switch in switches %}
{{ switch.flag }}
{%- endfor -%}
]
{%- for opt in optional_opts %}
 [-{{ opt.flag }} {{ opt.metavar }}]
{%- endfor -%}
{%- for opt in required_opts %}
 -{{ opt.flag }} {{ opt.metavar }}
{%- endfor -%}
{% endset %}
{% set getopts_str %}
{{- switches|map(attribute='flag')|join -}}
{%- for opt in opts %}
{{ opt.flag }}{{ ':' if opt.metavar }}
{%- endfor -%}
{% endset %}
{{ function_name }}() {
	local OPTIND
	local OPTARG
	local func_name
	local usage
	local required_opts
	local additive_opts
	local min_positional_args
	local max_positional_args
	local provided_opts
	local missing_opts

	{% for switch in switches %}
	local {{ switch.dest }}
	{% endfor %}
	{% for opt in opts %}
	local {{ opt.dest }}
	{% endfor %}

	{% for switch in switches %}
	{% if switch.additive %}
	{{ switch.dest }}=({{ '"{}"'.format(switch.default) if switch.default }})
	{% else %}
	{{ switch.dest }}="{{ switch.default }}"
	{% endif %}
	{% endfor %}
	{% for opt in opts %}
	{% if opt.additive %}
	{{ opt.dest }}=({{ '"{}"'.format(opt.default) if opt.default }})
	{% else %}
	{{ opt.dest }}="{{ opt.default }}"
	{% endif %}
	{% endfor %}

	{% if function_name != 'main' %}
	func_name="$PROGNAME:$FUNCNAME"
	{% else %}
	func_name="$PROGNAME"
	{% endif %}

	usage() {
		cat <<EOF | sed 's/^\t\t//' >&2
		NAME
			${func_name} -- {{ short_description }}

		SYNOPSIS
			${func_name}{{ options_metavars }}{{ positional_args_metavars }}

		DESCRIPTION
			{{ description }}

			The options are as follows:

			-h	print this help and exit

			{% for switch in switches %}
			-{{ switch.flag }}	{{ switch.description }}
				{%- if switch.default +%} (default: {{ switch.default }})
				{%- endif %}

				{% if switch.additive %}
				may be given more than once
				{% endif %}

			{% endfor %}
			{% for opt in opts %}
			-{{ opt.flag }} {{ opt.metavar }}
				{{ '(required) ' if opt.required }}{{ opt.description }}
				{%- if opt.default +%} (default: {{ opt.default }})
				{%- endif %}

				{% if opt.additive %}
				may be given more than once
				{% endif %}

			{% endfor %}
			{% if positional_args_help %}

			{{ positional_args_help }}
			{% endif %}
EOF
	}

	# options which must be given
	required_opts=(
		{%- for flag in required_opts|map(attribute='flag') -%}
		"{{ flag }}"{{ ' ' if not loop.last }}
		{%- endfor -%}
	)
	# options which may be given more than once
	additive_opts=(
		{%- for flag in switches|selectattr('additive')|map(attribute='flag') -%}
		"{{ flag }}"{{ ' ' if not loop.last or opts|selectattr('additive')|list }}
		{%- endfor -%}
		{%- for flag in opts|selectattr('additive')|map(attribute='flag') -%}
		"{{ flag }}"{{ ' ' if not loop.last }}
		{%- endfor -%}
	)
	# minimum number of positional arguments allowed (ignored if empty)
	min_positional_args="{{ min_positional_args if min_positional_args > 0 }}"
	# maximum number of positional arguments allowed (ignored if empty)
	max_positional_args="{{ max_positional_args if max_positional_args > 0}}"

	# tracks which options have been provided
	provided_opts=()
	while getopts 'h{{ getopts_str }}' opt; do
		if ! contains_value "$opt" "${additive_opts[@]:-}" && contains_value "$opt" "${provided_opts[@]:-}"; then
			log_error "option cannot be given more than once: $opt"
			usage
			exit 1
		fi

		case "$opt" in
			h)
				usage
				exit 0
				;;
			{% for switch in switches %}
			{{ switch.flag }})
				{% if switch.additive %}
				{{ switch.dest }}+=("y")
				{% else %}
				{{ switch.dest }}="y"
				{% endif %}
				;;
			{% endfor %}
			{% for opt in opts %}
			{{ opt.flag }})
				{% if opt.additive %}
				{{ opt.dest }}+=("$OPTARG")
				{% else %}
				{{ opt.dest }}="$OPTARG"
				{% endif %}
				;;
			{% endfor %}
			*)
				usage
				exit 1
				;;
		esac
		provided_opts+=("$opt")
	done
	shift $((OPTIND - 1))

	if [ -n "$min_positional_args" ] && [ "$#" -lt "$min_positional_args" ]; then
		log_error "at least ${min_positional_args} positional argument(s) needed but got only $#: $*"
		usage
		exit 1
	fi
	if [ -n "$max_positional_args" ] && [ "$#" -gt "$max_positional_args" ]; then
		log_error "up to ${max_positional_args} positional argument(s) allowed but got $#: $*"
		usage
		exit 1
	fi

	if [ "{{'${#required_opts[@]}'}}" -gt "0" ]; then
		missing_opts=()
		for opt in "${required_opts[@]}"; do
			if ! contains_value "$opt" "${provided_opts[@]:-}"; then
				missing_opts+=("${opt}")
			fi
		done
		if [ "{{'${#missing_opts[@]}'}}" -gt "0" ]; then
			log_error "missing required options: ${missing_opts[*]}"
			usage
			exit 1
		fi
	fi

	{% for switch in switches %}
	{% if switch.additive %}
	log_debug "{{ switch.dest }}: ${{'{'}}{{ switch.dest }}{{'[*]:-}'}}"
	{% else %}
	log_debug "{{ switch.dest }}: ${{'{'}}{{ switch.dest }}{{':-}'}}"
	{% endif %}
	{% endfor %}
	{% for opt in opts %}
	{% if opt.additive %}
	if [[ "${{'{#'}}{{ opt.dest }}{{'[@]}'}}" -gt "0" ]]; then
		log_debug "{{ opt.dest }}: $(printf '\n\t"%s"' "${{'{'}}{{ opt.dest }}{{'[@]:-}'}}")"
	fi
	{% else %}
	log_debug "{{ opt.dest }}: ${{'{'}}{{ opt.dest }}{{':-}'}}"
	{% endif %}
	{% endfor %}
	{% if max_positional_args != 0 %}
	if [[ "$#" -gt "0" ]]; then
		log_debug "positional args: $(printf '\n\t"%s"' "$@")"
	else
		log_debug 'no positional args given'
	fi
	{% endif %}
}
