{{ function_name }}() {
	{% if verbosity_switch %}
	local OLD_VERBOSITY
	{% endif %}
	{% if has_opts %}
	local OPTIND
	local OPTARG
	{% endif %}
	{% if include_usage %}
	local func_name
	local {{ function_name }}_usage
	{% endif %}
	{% if additive_flags %}
	local additive_opts
	{% endif %}
	{% if has_opts %}
	local provided_opts
	{% endif %}
	{% if required_opts %}
	local required_opts
	local missing_opts
	{% endif %}
	{% if (switches + opts) %}

	{% for opt in (switches + opts) %}
	local {{ opt.dest }}
	{% endfor %}

	{% for opt in (switches + opts) %}
	{% if opt.additive %}
	{{ opt.dest }}=()
	{% else %}
	{{ opt.dest }}="{{ opt.default }}"
	{% endif %}
	{% endfor %}

	{% endif %}
	{% if include_usage %}
	func_name="{{ ['${0##*/}', '${FUNCNAME}' if function_name != 'main']|select|join(':') }}"

	{{ function_name }}_usage() {
		cat <<EOF | sed 's/^\t\t//' >&2
		NAME
			{{
				'${func_name} -- %s'
				|format(short_description)
				|wordwrap(width=78-(8*1), break_long_words=False)
				|indent(width='\t'*3, blank=True)
			}}

		SYNOPSIS
			${func_name}{{ options_metavars }}

		DESCRIPTION
			{{
				description
				|wordwrap(width=78-(8*1), break_long_words=False)
				|indent(width='\t'*3, blank=True)
			}}

			The options are as follows:

			-h	print this help and exit

			{% for switch in switches %}
			-{{ switch.flag }}
				{{-
					('\t' + switch.description)
					|wordwrap(width=78-(8*1), break_long_words=False)
					|indent(width='\t'*4, blank=True)
					if switch.description
				}}
				{% if switch.additive %}
				(may be given more than once)
				{% endif %}
				{% if switch.default %}
				{{ '(default: %s)'|format(switch.default) }}
				{% endif %}

			{% endfor %}
			{% for opt in opts %}
			-{{ opt.flag }} {{ opt.metavar|default(opt.dest|upper) }}
				{{
					['(required)' if opt.required, opt.description]
					|select
					|join(' ')
					|wordwrap(width=78-(8*2), break_long_words=False)
					|indent(width='\t'*4, blank=True)
				}}
				{% if opt.additive %}
				(may be given more than once)
				{% endif %}
				{% if opt.default %}
				{{ '(default: %s)'|format(opt.default) }}
				{% endif %}

			{% endfor %}
			{% if max_positional_args != 0 and positional_args_help|join|trim|length > 0 %}
			Positional Arguments:

			{% for positional_arg_help in positional_args_help %}
			{% set positional_arg_help=(positional_arg_help|trim).split(maxsplit=1) %}
			{{
				positional_arg_help
				|join('\t' if positional_arg_help[0]|length < 8 else '\n')
				|wordwrap(width=78-(8*1), break_long_words=False)
				|indent(width='\t'*4, blank=True)
				if positional_arg_help|length > 0
			}}

			{%endfor %}

			{% endif %}
EOF
	}

	{% endif %}
	{% if required_opts %}
	required_opts=(
		{%- for flag in required_opts|map(attribute='flag') %}
		{{- '"%s"'|format(flag) -}}{{- ' ' if not loop.last -}}
		{% endfor -%}
	)
	{% endif %}
	{% if additive_flags %}
	additive_opts=(
		{%- for flag in additive_flags %}
		{{- '"%s"'|format(flag) -}}{{- ' ' if not loop.last -}}
		{% endfor -%}
	)
	{% endif %}
	{% if has_opts %}

	# tracks which options have been provided
	provided_opts=()
	while getopts ':{{ getopts_str }}' opt; do
		if \
			{% if additive_flags %}
			! grep --quiet --fixed-strings --line-regexp --regexp="$opt" <(printf '%s\n' "${additive_opts[@]:-}") && \
			{% endif %}
			grep --quiet --fixed-strings --line-regexp --regexp="$opt" <(printf '%s\n' "${provided_opts[@]:-}");
		then
			{% if include_usage %}
			{{ function_name }}_usage
			{% endif %}
			log_error "option cannot be given more than once: $opt"
			exit 1
		fi

		case "$opt" in
			{% if include_usage %}
			h)
				{{ function_name }}_usage
				exit 0
				;;
			{% endif %}
			{% for switch in switches %}
			{{ switch.flag }})
				{% if switch.additive %}
				{{ switch.dest }}+=("{{ switch.value if switch.value else 'y' }}")
				{% else %}
				{{ switch.dest }}="{{ switch.value if switch.value else 'y' }}"
				{% endif %}
				;;
			{% endfor %}
			{% for opt in opts %}
			{{ opt.flag }})
				{% if opt.additive %}
				{{ opt.dest }}+=("$OPTARG")
				{% else %}
				{{ opt.dest }}="$OPTARG"
				{% endif %}
				;;
			{% endfor %}
			':')
				{% if include_usage %}
				{{ function_name }}_usage
				{% endif %}
				log_error "option requires an argument value: ${OPTARG}"
				exit 1
				;;
			'?')
				{% if include_usage %}
				{{ function_name }}_usage
				{% endif %}
				log_error "unknown option: ${OPTARG}"
				exit 1
				;;
			*)
				{% if include_usage %}
				{{ function_name }}_usage
				{% endif %}
				log_error "CLI error due to unhandled option: opt='$opt'\tOPTARG='$OPTARG'"
				exit 1
				;;
		esac
		provided_opts+=("$opt")
	done
	shift $((OPTIND - 1))

	{% endif %}
	{% if verbosity_switch %}
	OLD_VERBOSITY="${VERBOSITY:-}"
	VERBOSITY="{{ ("$(printf '%%s' \"${%s[@]:-}\")" if verbosity_switch.additive else '${%s:-}')|format(verbosity_switch.dest) }}"

	{% endif %}
	{% for o in (switches + opts)|selectattr('additive')|selectattr('default', 'defined') %}
	if [ "{{ '${#%s[@]}'|format(o.dest) }}" -eq "0" ]; then
		{{ o.dest }}=(
			{%- for v in (o.default|list if o.default is iterable else [o.default]) %}
			{{- '"{}"'.format(v) if v is string else v -}}{{- ' ' if not loop.last -}}
			{% endfor -%}
		)
	fi

	{% endfor %}
	{% if required_opts %}
	if [ "{{'${#required_opts[@]}'}}" -gt "0" ]; then
		missing_opts=()
		provided_opts=($(printf '%s\n' "${provided_opts[@]:-}" | sort | uniq))
		for opt in "${required_opts[@]}"; do
			if ! grep --quiet --fixed-strings --line-regexp --regexp="$opt" <(printf '%s\n' "${provided_opts[@]:-}"); then
				missing_opts+=("${opt}")
			fi
		done
		if [ "{{'${#missing_opts[@]}'}}" -gt "0" ]; then
			{% if include_usage %}
			{{ function_name }}_usage
			{% endif %}
			log_error "missing required options: ${missing_opts[*]}"
			exit 1
		fi
	fi

	{% endif %}
	{% if min_positional_args > 0 and min_positional_args == max_positional_args %}
	if [ "$#" -ne "{{ min_positional_args }}" ]; then
		{% if include_usage %}
		{{ function_name }}_usage
		{% endif %}
		log_error "exactly {{ min_positional_args }} positional argument(s) needed but got $#:" "$@"
		exit 1
	fi

	{% else %}
	{% if min_positional_args > 0 %}
	if [ "$#" -lt "{{ min_positional_args }}" ]; then
		{% if include_usage %}
		{{ function_name }}_usage
		{% endif %}
		log_error "at least {{ min_positional_args }} positional argument(s) needed but got only $#:" "$@"
		exit 1
	fi
	{% endif %}
	{% if max_positional_args >= 0 %}
	if [ "$#" -gt "{{ max_positional_args }}" ]; then
		{% if include_usage %}
		{{ function_name }}_usage
		{% endif %}
		log_error "up to {{ max_positional_args }} positional argument(s) allowed but got $#:" "$@"
		exit 1
	fi
	{% endif %}

	{% endif %}
	{% for opt in (switches + opts) %}
	{% if opt.additive %}
	log_debug "{{ opt.dest }}:" "{{ '${%s[@]:-}'|format(opt.dest) }}"
	{% else %}
	log_debug "{{ opt.dest }}: {{ '${%s:-}'|format(opt.dest) }}"
	{% endif %}
	{% endfor %}
	{% if max_positional_args != 0 %}
	if [[ "$#" -gt "0" ]]; then
		log_debug "positional args:" "$@"
	else
		log_debug 'no positional args given'
	fi
	{% endif %}

	{% if verbosity_switch %}
	VERBOSITY="${OLD_VERBOSITY:-}"
	{% endif %}
}
