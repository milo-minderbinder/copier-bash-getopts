{% set optional_opts = opts|rejectattr('required')|list %}
{% set required_opts = opts|selectattr('required')|list %}
{% set additive_flags = (switches + opts)|selectattr('additive')|map(attribute='flag') %}
{% set options_metavars|replace('\n', '') %}
{% if include_usage or switches %}
 [-
{% if include_usage %}
h
{% endif -%}
{% for switch in switches %}
{{ switch.flag }}
{% endfor -%}
]
{% endif -%}
{% for opt in optional_opts %}
 [-{{ opt.flag }} {{ opt.metavar|default(opt.dest|upper) }}]
{% endfor -%}
{% for opt in required_opts %}
 -{{ opt.flag }} {{ opt.metavar|default(opt.dest|upper) }}
{% endfor -%}
{% if positional_args_metavars %}
 {{ positional_args_metavars.split()|join(' ') }}
{% endif -%}
{% endset %}
{% set verbosity_switch=switches|selectattr('dest', 'eq', 'verbosity')|first %}
{% set getopts_str|replace('\n', '') %}
{% if include_usage -%}
h
{% endif -%}
{{ switches|map(attribute='flag')|join }}
{{ opts|map(attribute='flag')|batch(1)|map('batch', 2, ':')|map('map', 'join')|map('join')|join }}
{% endset %}
{{ function_name }}() {
	{% if verbosity_switch %}
	local OLD_VERBOSITY
	{% endif %}
	local OPTIND
	local OPTARG
	local func_name
	{% if include_usage %}
	local {{ function_name }}_usage
	{% endif %}
	{% if additive_flags %}
	local additive_opts
	{% endif %}
	local provided_opts
	{% if required_opts %}
	local required_opts
	local missing_opts
	{% endif %}
	{% if min_positional_args > 0 %}
	local min_positional_args
	{% endif %}
	{% if max_positional_args > 0 %}
	local max_positional_args
	{% endif %}

	{% for switch in switches %}
	local {{ switch.dest }}
	{% endfor %}
	{% for opt in opts %}
	local {{ opt.dest }}
	{% endfor %}

	{% for switch in switches %}
	{% if switch.additive %}
	{{ switch.dest }}=({{ '"{}"'.format(switch.default|join('" "')) if switch.default }})
	{% else %}
	{{ switch.dest }}="{{ switch.default }}"
	{% endif %}
	{% endfor %}
	{% for opt in opts %}
	{% if opt.additive %}
	{{ opt.dest }}=({{ '"{}"'.format(opt.default) if opt.default }})
	{% else %}
	{{ opt.dest }}="{{ opt.default }}"
	{% endif %}
	{% endfor %}

	{% if function_name != 'main' %}
	func_name="$PROGNAME:$FUNCNAME"
	{% else %}
	func_name="$PROGNAME"
	{% endif %}
	{% if include_usage %}

	{{ function_name }}_usage() {
		cat <<EOF | sed 's/^\t\t//' >&2
		NAME
			${func_name} -- {{ short_description }}

		SYNOPSIS
			${func_name}{{ options_metavars }}

		DESCRIPTION
			{{ description }}

			The options are as follows:

			-h	print this help and exit

			{% for switch in switches %}
			-{{ switch.flag }}	{{ switch.description }}
				{% if switch.additive %}
				may be given more than once
				{% endif %}
				{% if switch.default %}
				{{ '(default: %s)'|format(switch.default) }}
				{% endif %}

			{% endfor %}
			{% for opt in opts %}
			-{{ opt.flag }} {{ opt.metavar|default(opt.dest|upper) }}
				{{ '(required) ' if opt.required }}{{ opt.description }}
				{% if opt.additive %}
				may be given more than once
				{% endif %}
				{% if opt.default %}
				{{ '(default: %s)'|format(opt.default) }}
				{% endif %}

			{% endfor %}
			{% if positional_args_help %}
			{{ positional_args_help }}
			{% endif %}
EOF
	}
	{% endif %}

	{% if required_opts %}
	required_opts=(
		{%- for flag in required_opts|map(attribute='flag') %}
		{{- '"%s"'|format(flag) -}}{{- ' ' if not loop.last -}}
		{% endfor -%}
	)
	{% endif %}
	{% if additive_flags %}
	additive_opts=(
		{%- for flag in additive_flags %}
		{{- '"%s"'|format(flag) -}}{{- ' ' if not loop.last -}}
		{% endfor -%}
	)
	{% endif %}
	{% if min_positional_args > 0 %}
	min_positional_args="{{ min_positional_args }}"
	{% endif %}
	{% if max_positional_args > 0 %}
	max_positional_args="{{ max_positional_args if max_positional_args > 0}}"
	{% endif %}

	# tracks which options have been provided
	provided_opts=()
	while getopts '{{ getopts_str }}' opt; do
		if \
			{% if additive_flags %}
			! grep --quiet --fixed-strings --line-regexp --regexp="$opt" <(printf '%s\n' "${additive_opts[@]:-}") && \
			{% endif %}
			grep --quiet --fixed-strings --line-regexp --regexp="$opt" <(printf '%s\n' "${provided_opts[@]:-}");
		then
			log_error "option cannot be given more than once: $opt"
			{% if include_usage %}
			{{ function_name }}_usage
			{% endif %}
			exit 1
		fi

		case "$opt" in
			{% if include_usage %}
			h)
				{{ function_name }}_usage
				exit 0
				;;
			{% endif %}
			{% for switch in switches %}
			{{ switch.flag }})
				{% if switch.additive %}
				{{ switch.dest }}+=("{{ switch.value if switch.value else 'y' }}")
				{% else %}
				{{ switch.dest }}="{{ switch.value if switch.value else 'y' }}"
				{% endif %}
				;;
			{% endfor %}
			{% for opt in opts %}
			{{ opt.flag }})
				{% if opt.additive %}
				{{ opt.dest }}+=("$OPTARG")
				{% else %}
				{{ opt.dest }}="$OPTARG"
				{% endif %}
				;;
			{% endfor %}
			*)
				{% if include_usage %}
				{{ function_name }}_usage
				{% endif %}
				exit 1
				;;
		esac
		provided_opts+=("$opt")
	done
	shift $((OPTIND - 1))

	{% if verbosity_switch %}
	OLD_VERBOSITY="${VERBOSITY:-}"
	VERBOSITY="{{ ("$(printf '%%s' \"${%s[@]:-}\")" if verbosity_switch.additive else '${%s:-}')|format(verbosity_switch.dest) }}"
	{% endif %}

	{% if min_positional_args > 0 %}
	if [ -n "$min_positional_args" ] && [ "$#" -lt "$min_positional_args" ]; then
		log_error "at least ${min_positional_args} positional argument(s) needed but got only $#: $*"
		{% if include_usage %}
		{{ function_name }}_usage
		{% endif %}
		exit 1
	fi
	{% endif %}
	{% if max_positional_args > 0 %}
	if [ -n "$max_positional_args" ] && [ "$#" -gt "$max_positional_args" ]; then
		log_error "up to ${max_positional_args} positional argument(s) allowed but got $#: $*"
		{% if include_usage %}
		{{ function_name }}_usage
		{% endif %}
		exit 1
	fi
	{% endif %}

	{% if required_opts %}
	if [ "{{'${#required_opts[@]}'}}" -gt "0" ]; then
		missing_opts=()
		for opt in "${required_opts[@]}"; do
			if ! grep --quiet --fixed-strings --line-regexp --regexp="$opt" <(printf '%s\n' "${provided_opts[@]:-}")
				missing_opts+=("${opt}")
			fi
		done
		if [ "{{'${#missing_opts[@]}'}}" -gt "0" ]; then
			log_error "missing required options: ${missing_opts[*]}"
			{% if include_usage %}
			{{ function_name }}_usage
			{% endif %}
			exit 1
		fi
	fi
	{% endif %}

	{% for switch in switches %}
	{% if switch.additive %}
	log_debug "{{ switch.dest }}: {{ '${%s[*]:-}'|format(switch.dest) }}"
	{% else %}
	log_debug "{{ switch.dest }}: {{ '${%s:-}'|format(switch.dest) }}"
	{% endif %}
	{% endfor %}
	{% for opt in opts %}
	{% if opt.additive %}
	if [[ "{{ '${#%s[@]}'|format(opt.dest) }}" -gt "0" ]]; then
		log_debug "{{ opt.dest }}: $(printf '\n\t"%s"' "{{ '${%s[@]:-}'|format(opt.dest) }}")"
	fi
	{% else %}
	log_debug "{{ opt.dest }}: {{ '${%s:-}'|format(opt.dest) }}"
	{% endif %}
	{% endfor %}
	{% if max_positional_args != 0 %}
	if [[ "$#" -gt "0" ]]; then
		log_debug "positional args: $(printf '\n\t"%s"' "$@")"
	else
		log_debug 'no positional args given'
	fi
	{% endif %}

	{% if verbosity_switch %}
	VERBOSITY="${OLD_VERBOSITY:-}"
	{% endif %}
}
