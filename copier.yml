---
_envops:
  trim_blocks: true
  lstrip_blocks: true

_exclude:
  # defaults:
  - 'copier.yaml'
  - 'copier.yml'
  - '~*'
  - '*.py[co]'
  - '__pycache__'
  - '.git'
  - '.DS_Store'
  - '.svn'
  # common:
  - '.gitignore'
  - '[._]*.sw[a-p]'
  # project specific:
  - 'common-header.bash'
  - 'common-functions.bash'
  - 'extra-functions.bash'
  - 'function.bash'

project_name:
  type: str
  placeholder: Project Name

project_slug:
  type: str
  default: "{{ project_name|lower|regex_replace('[^a-z0-9_.-]', '-') }}"

function_name:
  type: str
  default: 'main'

include_usage:
  type: bool
  default: 'yes'
  help: 'Output usage information when -h switch is provided or switch/opt/arg validation fails?'

short_description:
  type: str
  multiline: true
  default: '{{ "CLI utility" if function_name == "main" else "utility function" }} for '
  when: '{{ include_usage }}'

description:
  type: str
  multiline: true
  default: |-
    {{ project_slug }} is a {{ short_description }}
  when: '{{ include_usage }}'

file_name:
  type: str
  default: '{{ project_slug }}.bash'

include_header:
  type: bool
  default: '{{ "yes" if function_name == "main" else "no" }}'
  help: 'Add bash shebang and lines defined in common headers at the top of the file?'

include_common_functions:
  type: bool
  default: '{{ "yes" if function_name == "main" else "no" }}'
  help: 'Add common utility functions at top of script?'

include_extra_functions:
  type: bool
  default: 'no'
  help: 'Add extra utility functions at top of script?'

switches:
  type: yaml
  multiline: true
  default:
    - additive: true
      description: 'increase verbosity'
      dest: 'verbosity'
      flag: 'v'
      default: 'v'
      value: 'v'
  validator: |-
    {% for switch in switches %}
      {% for k in ('dest', 'flag') %}
        {% if k not in switch %}
          {{ k }} key must be defined in switch:
            {{ switch|to_nice_yaml}}
        {% endif %}
      {% endfor %}
      {% for k, v in switch|items %}
        {% if k == 'additive' %}
          {% if v is not boolean %}
            {{ k }} must be a boolean value: {{ v }}
          {% endif %}
        {% elif k == 'dest' %}
          {% if v is not string or v|trim|length == 0 %}
            {{ k }} must be a non-empty string: {{ v }}
          {% endif %}
        {% elif k == 'flag' %}
          {% if v is not string or v|trim|length != 1 %}
            {{ k }} must be a one character string: {{ v }}
          {% endif %}
        {% elif k in ('description', 'default', 'value') %}
          {% if (v is not string and v is not int) %}
            {{ k }} must be a string or int value: {{ v }}
          {% endif %}
        {% else %}
          invalid key "{{ k }}" in switch:
            {{ switch|to_nice_yaml }}
        {% endif %}
      {% endfor %}
    {% endfor %}
    {% for dest, items in switches|groupby('dest') %}
      {% if items|length > 1 %}
        duplicate dest "{{ dest }}" in switches:
          {{ items|to_nice_yaml }}
      {% endif %}
    {% endfor %}
    {% for flag, items in switches|groupby('flag') %}
      {% if items|length > 1 %}
        duplicate flag value "{{ flag }}" in switches:
          {{ items|to_nice_yaml }}
      {% endif %}
      {% if flag == "h" and include_usage %}
        flag "{{ flag }}" is not permitted in switches when include_usage is true:
          {{ items|to_nice_yaml }}
      {% endif %}
    {% endfor %}

opts:
  type: yaml
  multiline: true
  default:
    - additive: false
      default: '-'
      description: 'output file'
      dest: 'output_file'
      flag: 'o'
      metavar: 'OUTPUT_FILE'
      required: false
  validator: |-
    {% for opt in opts %}
      {% for k in ('dest', 'flag') %}
        {% if k not in opt %}
          {{ k }} key must be defined in opt:
            {{ opt|to_nice_yaml}}
        {% endif %}
      {% endfor %}
      {% for k, v in opt|items %}
        {% if k in ('additive', 'required') %}
          {% if v is not boolean %}
            {{ k }} must be a boolean value: {{ v }}
          {% endif %}
        {% elif k == 'dest' %}
          {% if v is not string or v|trim|length == 0 %}
            {{ k }} must be a non-empty string: {{ v }}
          {% endif %}
        {% elif k == 'flag' %}
          {% if v is not string or v|trim|length != 1 %}
            {{ k }} must be a one character string: {{ v }}
          {% endif %}
        {% elif k in ('description', 'default', 'value', 'metavar') %}
          {% if (v is not string and v is not int) %}
            {{ k }} must be a string or int value: {{ v }}
          {% endif %}
        {% else %}
          invalid key "{{ k }}" in opt:
            {{ opt|to_nice_yaml }}
        {% endif %}
      {% endfor %}
    {% endfor %}
    {% for dest, items in (opts + switches)|groupby('dest') %}
      {% if items|length > 1 %}
        duplicate dest value "{{ dest }}" in opts/switches:
          {{ items|to_nice_yaml }}
      {% endif %}
    {% endfor %}
    {% for flag, items in (opts + switches)|groupby('flag') %}
      {% if items|length > 1 %}
        duplicate flag value "{{ flag }}" in opts/switches:
          {{ items|to_nice_yaml }}
      {% endif %}
      {% if flag == "h" and include_usage %}
        flag "{{ flag }}" is not permitted in opts when include_usage is true:
          {{ items|to_nice_yaml }}
      {% endif %}
    {% endfor %}

max_positional_args:
  type: int
  default: 0
  help: 'total number of positional arguments allowed; if set to -1, then there will be no upper limit enforced'

min_positional_args:
  type: int
  default: "{{ max_positional_args if max_positional_args != 0 else -1 }}"
  help: 'total number of positional arguments required; if set to -1 or 0, then there will be no lower limit enforced'

positional_args_metavars:
  type: str
  default: >-
    {%- if min_positional_args >= 0 -%}
      {%- for i in range(min_positional_args) %} ARG{%- endfor -%}
    {%- endif %}
    {%- if max_positional_args > min_positional_args -%}
      {%- for i in range(max_positional_args - ([0, min_positional_args]|max)) %} [ARG]{%- endfor -%}
    {%- elif max_positional_args < 0 %}
     [ARG]...
    {%- endif -%}
  when: '{{ max_positional_args != 0 }}'

positional_args_help:
  type: str
  multiline: true
  default: ''
  when: '{{ max_positional_args != 0 }}'

# num_opts:
#   type: int

# opts:
#   type: yaml
#   multiline: true
#   default: |
#     {% for i in range(num_opts) -%}
#     - flag: ""
#       # dest is the bash var name opt val will be stored in
#       dest: ""
#       required: false
#       additive: false
#       metavar: "VALUE"
#       default: ""
#       description: ""
#     {% endfor -%}

# opt_names:
#   type: yaml
#   default: []

# opts:
#   type: yaml
#   multiline: true
#   default: |
#     {% for opt_name in opt_names -%}
#     - flag: "{{ opt_name|first }}"
#       dest: "{{ opt_name }}"
#       required: false
#       additive: false
#       metavar: "{{ opt_name|upper }}"
#       default: ""
#       description: ""
#     {% endfor -%}

# _jinja_extensions:
#   - cookiecutter.extensions.SlugifyExtension

